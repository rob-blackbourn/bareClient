{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 A simple asyncio http client support HTTP versions 1.0, 1.1 and 2. Description \u00b6 This package provides the asyncio transport for h11 , and h2 . It makes little attempt to provide any helpful features which might do unnecessary work. This client is part of a suite of lightweight HTTP tools around the bareASGI framework.","title":"Welcome"},{"location":"#welcome","text":"A simple asyncio http client support HTTP versions 1.0, 1.1 and 2.","title":"Welcome"},{"location":"#description","text":"This package provides the asyncio transport for h11 , and h2 . It makes little attempt to provide any helpful features which might do unnecessary work. This client is part of a suite of lightweight HTTP tools around the bareASGI framework.","title":"Description"},{"location":"api/bareclient/","text":"API \u00b6 class HttpClient \u00b6 Summary \u00b6 Initialise an HTTP client bareclient . HttpClient ( * , method : str , headers : Optional[List[Header]] , content : Optional[Content] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes , protocols : Optional[List[str]] ) -> None Parameters \u00b6 * (optional) method : str The HTTP method. Defaults to 'GET'. headers : Optional[List[Header]] The headers. Defaults to None. content : Optional[Content] The body content. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop. Defaults to None. h11_bufsiz : int The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes The decompressors. Defaults to None. protocols : Optional[List[str]] The protocols. Defaults to None. class HttpSession \u00b6 Summary \u00b6 Initialise an HTTP session bareclient . HttpSession ( * , headers : Optional[List[Header]] , cookies : Optional[Mapping[bytes , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes , protocols : Optional[List[str]] ) -> None Parameters \u00b6 * (optional) headers : Optional[List[Header]] The headers. Defaults to None. cookies : Optional[Mapping[bytes The cookies. Defaults to None. loop : Optional[AbstractEventLoop] The asyncio event loop. Defaults to None. h11_bufsiz : int The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes The decompressors. Defaults to None. protocols : Optional[List[str]] The list of protocols. Defaults to None. method HttpSession . request \u00b6 Summary \u00b6 Make an HTTP request HttpSession . request ( path : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] ) -> HttpSessionInstance Parameters \u00b6 path : str (optional) The path excluding the scheme and host part * (optional) method : str The HTTP method, defaults to 'GET'. Defaults to 'GET'. headers : Optional[List[Header]] Optional headers. Defaults to None. content : Optional[Content] Optional content, defaults to None. Defaults to None. Returns \u00b6 HttpSessionInstance : A context instance yielding the response and body module bareclient.helpers \u00b6 Summary \u00b6 Helpers async function bareclient . get \u00b6 Summary \u00b6 Issues a GET request async bareclient . get ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> bytes Parameters \u00b6 url : str (optional) The url * (optional) headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. Returns \u00b6 bytes : [description] async function bareclient . get_json \u00b6 Summary \u00b6 Issues a GET request returning a JSON object async bareclient . get_json ( url : str , * , headers : Headers , loads : Callable[[str] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> Any Parameters \u00b6 url : str (optional) The url * (optional) headers : Headers Any extra headers required. Defaults to None. loads : Callable[[str] The function to loads the JSON object from the string. Defaults to json.loads. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. Returns \u00b6 Any : The decoded JSON object async function bareclient . get_text \u00b6 Summary \u00b6 Issues a GET request returning a string async bareclient . get_text ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , encoding : str , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> str Parameters \u00b6 url : str (optional) The url * (optional) headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. encoding : str cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. Returns \u00b6 str : [description] async function bareclient . post \u00b6 Summary \u00b6 Issues a POST request async bareclient . post ( url : str , content : bytes , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> bytes Parameters \u00b6 url : str (optional) The url content : bytes (optional) The body content * (optional) headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. Returns \u00b6 bytes : The response body async function bareclient . post_json \u00b6 Summary \u00b6 Issues a POST request with a JSON payload async bareclient . post_json ( url : str , obj : Any , * , loads : Callable[[str] , dumps : Callable[[Any] , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> Optional[Any] Parameters \u00b6 url : str (optional) The url obj : Any (optional) The JSON payload * (optional) loads : Callable[[str] The function used to decode the response. Defaults to json.loads. dumps : Callable[[Any] The function used to encode the request. Defaults to json.dumps. headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. Returns \u00b6 Optional[Any] : The decoded response async function bareclient . post_text \u00b6 Summary \u00b6 Issues a POST request with a str body async bareclient . post_text ( url : str , text : str , * , encoding : Any , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> bytes Parameters \u00b6 url : str (optional) The url text : str (optional) * (optional) encoding : Any headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. Returns \u00b6 bytes : The response body async function bareclient . request \u00b6 Summary \u00b6 Gets bytes from a url. async bareclient . request ( url : str , method : str , * , headers : Headers , content : Optional[bytes] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , chunk_size : int ) -> bytes Parameters \u00b6 url : str (optional) The url to get. method : str (optional) The HTTP method (eg. 'GET', 'POST', etc). * (optional) headers : Headers Any extra headers required. Defaults to None. content : Optional[bytes] The content to send.. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. chunk_size : int The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. Returns \u00b6 bytes : The bytes received Description \u00b6 buf = await request ( 'https://jsonplaceholder.typicode.com/todos/1' , 'GET' , ssl = ssl . SSLContext () )","title":"bareclient"},{"location":"api/bareclient/#api","text":"","title":"API"},{"location":"api/bareclient/#class-httpclient","text":"","title":"class HttpClient"},{"location":"api/bareclient/#summary","text":"Initialise an HTTP client bareclient . HttpClient ( * , method : str , headers : Optional[List[Header]] , content : Optional[Content] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes , protocols : Optional[List[str]] ) -> None","title":"Summary"},{"location":"api/bareclient/#parameters","text":"* (optional) method : str The HTTP method. Defaults to 'GET'. headers : Optional[List[Header]] The headers. Defaults to None. content : Optional[Content] The body content. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop. Defaults to None. h11_bufsiz : int The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes The decompressors. Defaults to None. protocols : Optional[List[str]] The protocols. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#class-httpsession","text":"","title":"class HttpSession"},{"location":"api/bareclient/#summary_1","text":"Initialise an HTTP session bareclient . HttpSession ( * , headers : Optional[List[Header]] , cookies : Optional[Mapping[bytes , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes , protocols : Optional[List[str]] ) -> None","title":"Summary"},{"location":"api/bareclient/#parameters_1","text":"* (optional) headers : Optional[List[Header]] The headers. Defaults to None. cookies : Optional[Mapping[bytes The cookies. Defaults to None. loop : Optional[AbstractEventLoop] The asyncio event loop. Defaults to None. h11_bufsiz : int The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes The decompressors. Defaults to None. protocols : Optional[List[str]] The list of protocols. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#method-httpsessionrequest","text":"","title":"method HttpSession.request"},{"location":"api/bareclient/#summary_2","text":"Make an HTTP request HttpSession . request ( path : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] ) -> HttpSessionInstance","title":"Summary"},{"location":"api/bareclient/#parameters_2","text":"path : str (optional) The path excluding the scheme and host part * (optional) method : str The HTTP method, defaults to 'GET'. Defaults to 'GET'. headers : Optional[List[Header]] Optional headers. Defaults to None. content : Optional[Content] Optional content, defaults to None. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns","text":"HttpSessionInstance : A context instance yielding the response and body","title":"Returns"},{"location":"api/bareclient/#module-bareclienthelpers","text":"","title":"module bareclient.helpers"},{"location":"api/bareclient/#summary_3","text":"Helpers","title":"Summary"},{"location":"api/bareclient/#async-function-bareclientget","text":"","title":"async function bareclient.get"},{"location":"api/bareclient/#summary_4","text":"Issues a GET request async bareclient . get ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_3","text":"url : str (optional) The url * (optional) headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_1","text":"bytes : [description]","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientget_json","text":"","title":"async function bareclient.get_json"},{"location":"api/bareclient/#summary_5","text":"Issues a GET request returning a JSON object async bareclient . get_json ( url : str , * , headers : Headers , loads : Callable[[str] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> Any","title":"Summary"},{"location":"api/bareclient/#parameters_4","text":"url : str (optional) The url * (optional) headers : Headers Any extra headers required. Defaults to None. loads : Callable[[str] The function to loads the JSON object from the string. Defaults to json.loads. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_2","text":"Any : The decoded JSON object","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientget_text","text":"","title":"async function bareclient.get_text"},{"location":"api/bareclient/#summary_6","text":"Issues a GET request returning a string async bareclient . get_text ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , encoding : str , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> str","title":"Summary"},{"location":"api/bareclient/#parameters_5","text":"url : str (optional) The url * (optional) headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. encoding : str cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_3","text":"str : [description]","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientpost","text":"","title":"async function bareclient.post"},{"location":"api/bareclient/#summary_7","text":"Issues a POST request async bareclient . post ( url : str , content : bytes , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_6","text":"url : str (optional) The url content : bytes (optional) The body content * (optional) headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_4","text":"bytes : The response body","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientpost_json","text":"","title":"async function bareclient.post_json"},{"location":"api/bareclient/#summary_8","text":"Issues a POST request with a JSON payload async bareclient . post_json ( url : str , obj : Any , * , loads : Callable[[str] , dumps : Callable[[Any] , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> Optional[Any]","title":"Summary"},{"location":"api/bareclient/#parameters_7","text":"url : str (optional) The url obj : Any (optional) The JSON payload * (optional) loads : Callable[[str] The function used to decode the response. Defaults to json.loads. dumps : Callable[[Any] The function used to encode the request. Defaults to json.dumps. headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_5","text":"Optional[Any] : The decoded response","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientpost_text","text":"","title":"async function bareclient.post_text"},{"location":"api/bareclient/#summary_9","text":"Issues a POST request with a str body async bareclient . post_text ( url : str , text : str , * , encoding : Any , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_8","text":"url : str (optional) The url text : str (optional) * (optional) encoding : Any headers : Headers Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_6","text":"bytes : The response body","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientrequest","text":"","title":"async function bareclient.request"},{"location":"api/bareclient/#summary_10","text":"Gets bytes from a url. async bareclient . request ( url : str , method : str , * , headers : Headers , content : Optional[bytes] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , chunk_size : int ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_9","text":"url : str (optional) The url to get. method : str (optional) The HTTP method (eg. 'GET', 'POST', etc). * (optional) headers : Headers Any extra headers required. Defaults to None. content : Optional[bytes] The content to send.. Defaults to None. loop : Optional[AbstractEventLoop] The optional asyncio event loop.. Defaults to None. cafile : Optional[str] The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. chunk_size : int The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1.","title":"Parameters"},{"location":"api/bareclient/#returns_7","text":"bytes : The bytes received","title":"Returns"},{"location":"api/bareclient/#description","text":"buf = await request ( 'https://jsonplaceholder.typicode.com/todos/1' , 'GET' , ssl = ssl . SSLContext () )","title":"Description"},{"location":"user-guide/client/","text":"Client \u00b6 The basic usage is to create an HttpClient . GET \u00b6 The following example demonstrates a simple GET request. import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : async with HttpClient ( url ) as response : if response [ 'status_code' ] == 200 and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) The HttpClient provides an async context yielding a response or type Mapping[str, Any] which loosely follows the semantics of ASGI message passing. POST \u00b6 The following code demonstrates a simle POST request. import asyncio import json from bareutils import text_writer import bareutils.response_code as response_code from bareclient import HttpClient async def main ( url : str ) -> None : obj = { 'name' : 'Rob' } body = json . dumps ( obj ) async with HttpClient ( url , method = 'POST' , headers = [( b 'content-type' , b 'application/json' )], content = text_writer ( body ) ) as response : if response_code . is_successful ( response [ 'status_code' ]): print ( \"OK\" ) asyncio . run ( main ( 'http://localhost:9009/test/api/info' )) Note that the body content is provided with the test_writer utility which turns the payload into an async iterator. Request \u00b6 The request is specified in the arguments to HttpClient . The first argument is the url . The remaining are keyword arguments: Keyword arguments: method (str, optional): The HTTP method. Defaults to 'GET'. headers (Optional[List[Header]], optional): The headers. Defaults to None. content (Optional[Content], optional): The body content. Defaults to None. loop (Optional[AbstractEventLoop], optional): The optional asyncio event loop. Defaults to None. h11_bufsiz (int, optional): The HTTP/1 buffer size. Defaults to 8096. cafile (Optional[str], optional): The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath (Optional[str], optional): The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata (Optional[str], optional): Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors (Optional[Mapping[bytes, Type[Decompressor]]], optional): The decompressors. Defaults to None. protocols (Optional[List[str]], optional): The protocols. Defaults to None. Response \u00b6 The response is yielded in the HttpClient async context. Keys: type ( Unicode string ) - Currently the only response is \"http.response\" . acgi[\"version\"] ( Unicode string ) - Version of the ACGI spec. http_version ( Unicode string ) - One of \"1.0\" , \"1.1\" or \"2\" . stream_id ( int ) - The HTTP/2 stream id, otherwise None. status_code ( int ) - The HTTP status code. headers ( Iterable[[byte string, byte string]] ) - A iterable of [name, value] two-item iterables, where name is the header name, and value is the header value. Order must be preserved in the HTTP response. Header names must be lowercased. Optional; defaults to an empty list. Pseudo headers (present in HTTP/2 and HTTP/3) must not be present. more_body ( bool ) - Signifies if the body has more content. body ( AsyncIterable[byte string] ) - The body content. For the above request the response might look as follows: { 'type' : 'http.response' , 'acgi' : { 'version' : '1.0' }, 'http_version' : '2' , 'stream_id' : 1 , 'status_code' : 200 , 'headers' : [ ( b 'content-type' , b 'text/html' ), ( b 'content-length' , b '53727' ), ( b 'last-modified' , b 'Sat, 15 Feb 2020 0...26:32 GMT' ), ... ], 'more_body' : True , 'body' : < async_generator obj ... 5 ede8f320 > , } Response Body \u00b6 The response body ( response[\"body\"] ) can be iterated over asynchronusly. async for part in response [ 'body' ]: print ( part )","title":"Client"},{"location":"user-guide/client/#client","text":"The basic usage is to create an HttpClient .","title":"Client"},{"location":"user-guide/client/#get","text":"The following example demonstrates a simple GET request. import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : async with HttpClient ( url ) as response : if response [ 'status_code' ] == 200 and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) The HttpClient provides an async context yielding a response or type Mapping[str, Any] which loosely follows the semantics of ASGI message passing.","title":"GET"},{"location":"user-guide/client/#post","text":"The following code demonstrates a simle POST request. import asyncio import json from bareutils import text_writer import bareutils.response_code as response_code from bareclient import HttpClient async def main ( url : str ) -> None : obj = { 'name' : 'Rob' } body = json . dumps ( obj ) async with HttpClient ( url , method = 'POST' , headers = [( b 'content-type' , b 'application/json' )], content = text_writer ( body ) ) as response : if response_code . is_successful ( response [ 'status_code' ]): print ( \"OK\" ) asyncio . run ( main ( 'http://localhost:9009/test/api/info' )) Note that the body content is provided with the test_writer utility which turns the payload into an async iterator.","title":"POST"},{"location":"user-guide/client/#request","text":"The request is specified in the arguments to HttpClient . The first argument is the url . The remaining are keyword arguments: Keyword arguments: method (str, optional): The HTTP method. Defaults to 'GET'. headers (Optional[List[Header]], optional): The headers. Defaults to None. content (Optional[Content], optional): The body content. Defaults to None. loop (Optional[AbstractEventLoop], optional): The optional asyncio event loop. Defaults to None. h11_bufsiz (int, optional): The HTTP/1 buffer size. Defaults to 8096. cafile (Optional[str], optional): The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath (Optional[str], optional): The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata (Optional[str], optional): Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors (Optional[Mapping[bytes, Type[Decompressor]]], optional): The decompressors. Defaults to None. protocols (Optional[List[str]], optional): The protocols. Defaults to None.","title":"Request"},{"location":"user-guide/client/#response","text":"The response is yielded in the HttpClient async context. Keys: type ( Unicode string ) - Currently the only response is \"http.response\" . acgi[\"version\"] ( Unicode string ) - Version of the ACGI spec. http_version ( Unicode string ) - One of \"1.0\" , \"1.1\" or \"2\" . stream_id ( int ) - The HTTP/2 stream id, otherwise None. status_code ( int ) - The HTTP status code. headers ( Iterable[[byte string, byte string]] ) - A iterable of [name, value] two-item iterables, where name is the header name, and value is the header value. Order must be preserved in the HTTP response. Header names must be lowercased. Optional; defaults to an empty list. Pseudo headers (present in HTTP/2 and HTTP/3) must not be present. more_body ( bool ) - Signifies if the body has more content. body ( AsyncIterable[byte string] ) - The body content. For the above request the response might look as follows: { 'type' : 'http.response' , 'acgi' : { 'version' : '1.0' }, 'http_version' : '2' , 'stream_id' : 1 , 'status_code' : 200 , 'headers' : [ ( b 'content-type' , b 'text/html' ), ( b 'content-length' , b '53727' ), ( b 'last-modified' , b 'Sat, 15 Feb 2020 0...26:32 GMT' ), ... ], 'more_body' : True , 'body' : < async_generator obj ... 5 ede8f320 > , }","title":"Response"},{"location":"user-guide/client/#response-body","text":"The response body ( response[\"body\"] ) can be iterated over asynchronusly. async for part in response [ 'body' ]: print ( part )","title":"Response Body"},{"location":"user-guide/installation/","text":"Installation \u00b6 This is a Python 3.7 package. pip install bareclient","title":"Installation"},{"location":"user-guide/installation/#installation","text":"This is a Python 3.7 package. pip install bareclient","title":"Installation"},{"location":"user-guide/session/","text":"Session \u00b6 A session utility HttpSession is provided. The import asyncio import logging import bareutils.response_code as response_code from bareclient import HttpSession logging . basicConfig ( level = logging . DEBUG ) async def main () -> None : session = HttpSession ( 'http://localhost:9009' ) for path in [ '/example1' , '/example2' , '/empty' ]: async with session . request ( path , method = 'GET' ) as response : print ( response ) if not response_code . is_successful ( response [ 'status_code' ]): print ( \"failed\" ) else : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ()) The session object will maintain cookies.","title":"Session"},{"location":"user-guide/session/#session","text":"A session utility HttpSession is provided. The import asyncio import logging import bareutils.response_code as response_code from bareclient import HttpSession logging . basicConfig ( level = logging . DEBUG ) async def main () -> None : session = HttpSession ( 'http://localhost:9009' ) for path in [ '/example1' , '/example2' , '/empty' ]: async with session . request ( path , method = 'GET' ) as response : print ( response ) if not response_code . is_successful ( response [ 'status_code' ]): print ( \"failed\" ) else : if response [ 'status_code' ] == response_code . OK and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) asyncio . run ( main ()) The session object will maintain cookies.","title":"Session"}]}