{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 A simple asyncio http Pyhton client package supporting HTTP versions 1.0, 1.1 and 2. This is the client companion to the ASGI server side web framework bareASGI and follows the same \"bare\" approach. It makes little attempt to provide any helpful features which might do unnecessary work, providing a foundation for whatever feature set is required. It was written to allow a web server which had negotiated the HTTP/2 protocol for make outgoing HTTP/2 calls. This increases performance and simplifies proxy configuration in a micro-service architecture. To find out more see getting started .","title":"Welcome"},{"location":"#welcome","text":"A simple asyncio http Pyhton client package supporting HTTP versions 1.0, 1.1 and 2. This is the client companion to the ASGI server side web framework bareASGI and follows the same \"bare\" approach. It makes little attempt to provide any helpful features which might do unnecessary work, providing a foundation for whatever feature set is required. It was written to allow a web server which had negotiated the HTTP/2 protocol for make outgoing HTTP/2 calls. This increases performance and simplifies proxy configuration in a micro-service architecture. To find out more see getting started .","title":"Welcome"},{"location":"api/bareclient/","text":"class HttpClient \u00b6 Summary \u00b6 Make an HTTP client. Description \u00b6 The following example will make a GET request. import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : async with HttpClient ( url , method = 'GET' ) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) bareclient . HttpClient ( url : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> None Parameters \u00b6 url : str The url method : str (optional) The HTTP method. Defaults to 'GET'. headers : Optional[List[Header]] (optional) The headers. Defaults to None. content : Optional[Content] (optional) The body content. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop. Defaults to None. h11_bufsiz : int (optional) The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. class HttpSession \u00b6 Summary \u00b6 Initialise an HTTP session Description \u00b6 The following makes a get request from a session: import asyncio from bareclient import HttpClient async def main ( url : str , path : str ) -> None : session = HttpSession ( url ) async with session . request ( path , method = 'GET' ) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org' , '/3/library/cgi.html' )) bareclient . HttpSession ( url : str , * , headers : Optional[List[Header]] , cookies : Optional[Mapping[bytes, List[Cookie]]] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> None Parameters \u00b6 url : str The url headers : Optional[List[Header]] (optional) The headers. Defaults to None. cookies : Optional[Mapping[bytes, List[Cookie]]] (optional) The cookies. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The asyncio event loop. Defaults to None. h11_bufsiz : int (optional) The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. method HttpSession . request \u00b6 Summary \u00b6 Make an HTTP request HttpSession . request ( path : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] ) -> HttpSessionInstance Parameters \u00b6 path : str The path excluding the scheme and host part method : str (optional) The HTTP method, defaults to 'GET'. Defaults to 'GET'. headers : Optional[List[Header]] (optional) Optional headers. Defaults to None. content : Optional[Content] (optional) Optional content, defaults to None. Defaults to None. Returns \u00b6 HttpSessionInstance : A context instance yielding the response and body class HttpUnboundSession \u00b6 Summary \u00b6 Initialise an HTTP session Description \u00b6 The following makes a get request from a session: import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : session = HttpUnboundSession () async with session . request ( url , method = 'GET' ) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) bareclient . HttpUnboundSession ( * , headers : Optional[List[Header]] , cookies : Optional[Mapping[bytes, List[Cookie]]] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] ) -> None Parameters \u00b6 headers : Optional[List[Header]] (optional) The headers. Defaults to None. cookies : Optional[Mapping[bytes, List[Cookie]]] (optional) The cookies. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The asyncio event loop. Defaults to None. h11_bufsiz : int (optional) The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The SSLContext options. Defaults to DEFAULT_OPTIONS. method HttpUnboundSession . request \u00b6 Summary \u00b6 Make an HTTP request HttpUnboundSession . request ( url : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] ) -> HttpSessionInstance Parameters \u00b6 url : str The url method : str (optional) The HTTP method, defaults to 'GET'. Defaults to 'GET'. headers : Optional[List[Header]] (optional) Optional headers. Defaults to None. content : Optional[Content] (optional) Optional content, defaults to None. Defaults to None. Returns \u00b6 HttpSessionInstance : A context instance yielding the response and body module bareclient.helpers \u00b6 Summary \u00b6 Helpers async function bareclient . get \u00b6 Summary \u00b6 Issues a GET request async bareclient . get ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> bytes Parameters \u00b6 url : str The url headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 bytes : [description] async function bareclient . get_json \u00b6 Summary \u00b6 Issues a GET request returning a JSON object Description \u00b6 The following gets some json: import asyncio from bareclient import get_json async def main ( url : str ) -> None : obj = await get_json ( url ) print ( obj ) asyncio . run ( main ( 'https://jsonplaceholder.typicode.com/todos/1' )) async bareclient . get_json ( url : str , * , headers : Headers , loads : Callable[[str], Any] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> Any Parameters \u00b6 url : str The url headers : Headers (optional) Any extra headers required. Defaults to None. loads : Callable[[str], Any] (optional) The function to loads the JSON object from the string. Defaults to json.loads. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 Any : The decoded JSON object async function bareclient . get_text \u00b6 Summary \u00b6 Issues a GET request returning a string Description \u00b6 The following gets some text: import asyncio from bareclient import get_text async def main ( url : str ) -> None : text = await get_text ( url ) print ( text ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) async bareclient . get_text ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , encoding : str , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> str Parameters \u00b6 url : str The url headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. encoding : str (optional) cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 str : [description] async function bareclient . post \u00b6 Summary \u00b6 Issues a POST request async bareclient . post ( url : str , content : bytes , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> bytes Parameters \u00b6 url : str The url content : bytes The body content headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 bytes : The response body async function bareclient . post_json \u00b6 Summary \u00b6 Issues a POST request with a JSON payload Description \u00b6 import asyncio from bareclient import post_json async def main ( url : str ) -> None : obj = await post_json ( url , { 'title' : 'A job' }, headers = [( b 'accept-encoding' , b 'gzip' )] ) print ( obj ) asyncio . run ( main ( 'https://jsonplaceholder.typicode.com/todos' )) async bareclient . post_json ( url : str , obj : Any , * , loads : Callable[[str], Any] , dumps : Callable[[Any], str] , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> Optional[Any] Parameters \u00b6 url : str The url obj : Any The JSON payload loads : Callable[[str], Any] (optional) The function used to decode the response. Defaults to json.loads. dumps : Callable[[Any], str] (optional) The function used to encode the request. Defaults to json.dumps. headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 Optional[Any] : The decoded response async function bareclient . post_text \u00b6 Summary \u00b6 Issues a POST request with a str body async bareclient . post_text ( url : str , text : str , * , encoding : Any , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> bytes Parameters \u00b6 url : str The url text : str encoding : Any (optional) headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 bytes : The response body async function bareclient . request \u00b6 Summary \u00b6 Gets bytes from a url. Description \u00b6 buf = await request ( 'https://jsonplaceholder.typicode.com/todos/1' , 'GET' , ssl = ssl . SSLContext () ) async bareclient . request ( url : str , method : str , * , headers : Headers , content : Optional[bytes] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> bytes Parameters \u00b6 url : str The url to get. method : str The HTTP method (eg. 'GET', 'POST', etc). headers : Headers (optional) Any extra headers required. Defaults to None. content : Optional[bytes] (optional) The content to send.. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None. Returns \u00b6 bytes : The bytes received.","title":"bareclient"},{"location":"api/bareclient/#class-httpclient","text":"","title":"class HttpClient"},{"location":"api/bareclient/#summary","text":"Make an HTTP client.","title":"Summary"},{"location":"api/bareclient/#description","text":"The following example will make a GET request. import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : async with HttpClient ( url , method = 'GET' ) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) bareclient . HttpClient ( url : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> None","title":"Description"},{"location":"api/bareclient/#parameters","text":"url : str The url method : str (optional) The HTTP method. Defaults to 'GET'. headers : Optional[List[Header]] (optional) The headers. Defaults to None. content : Optional[Content] (optional) The body content. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop. Defaults to None. h11_bufsiz : int (optional) The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#class-httpsession","text":"","title":"class HttpSession"},{"location":"api/bareclient/#summary_1","text":"Initialise an HTTP session","title":"Summary"},{"location":"api/bareclient/#description_1","text":"The following makes a get request from a session: import asyncio from bareclient import HttpClient async def main ( url : str , path : str ) -> None : session = HttpSession ( url ) async with session . request ( path , method = 'GET' ) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org' , '/3/library/cgi.html' )) bareclient . HttpSession ( url : str , * , headers : Optional[List[Header]] , cookies : Optional[Mapping[bytes, List[Cookie]]] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> None","title":"Description"},{"location":"api/bareclient/#parameters_1","text":"url : str The url headers : Optional[List[Header]] (optional) The headers. Defaults to None. cookies : Optional[Mapping[bytes, List[Cookie]]] (optional) The cookies. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The asyncio event loop. Defaults to None. h11_bufsiz : int (optional) The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#method-httpsessionrequest","text":"","title":"method HttpSession.request"},{"location":"api/bareclient/#summary_2","text":"Make an HTTP request HttpSession . request ( path : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] ) -> HttpSessionInstance","title":"Summary"},{"location":"api/bareclient/#parameters_2","text":"path : str The path excluding the scheme and host part method : str (optional) The HTTP method, defaults to 'GET'. Defaults to 'GET'. headers : Optional[List[Header]] (optional) Optional headers. Defaults to None. content : Optional[Content] (optional) Optional content, defaults to None. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns","text":"HttpSessionInstance : A context instance yielding the response and body","title":"Returns"},{"location":"api/bareclient/#class-httpunboundsession","text":"","title":"class HttpUnboundSession"},{"location":"api/bareclient/#summary_3","text":"Initialise an HTTP session","title":"Summary"},{"location":"api/bareclient/#description_2","text":"The following makes a get request from a session: import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : session = HttpUnboundSession () async with session . request ( url , method = 'GET' ) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) bareclient . HttpUnboundSession ( * , headers : Optional[List[Header]] , cookies : Optional[Mapping[bytes, List[Cookie]]] , loop : Optional[AbstractEventLoop] , h11_bufsiz : int , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] ) -> None","title":"Description"},{"location":"api/bareclient/#parameters_3","text":"headers : Optional[List[Header]] (optional) The headers. Defaults to None. cookies : Optional[Mapping[bytes, List[Cookie]]] (optional) The cookies. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The asyncio event loop. Defaults to None. h11_bufsiz : int (optional) The HTTP/1 buffer size. Defaults to 8096. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The SSLContext options. Defaults to DEFAULT_OPTIONS.","title":"Parameters"},{"location":"api/bareclient/#method-httpunboundsessionrequest","text":"","title":"method HttpUnboundSession.request"},{"location":"api/bareclient/#summary_4","text":"Make an HTTP request HttpUnboundSession . request ( url : str , * , method : str , headers : Optional[List[Header]] , content : Optional[Content] ) -> HttpSessionInstance","title":"Summary"},{"location":"api/bareclient/#parameters_4","text":"url : str The url method : str (optional) The HTTP method, defaults to 'GET'. Defaults to 'GET'. headers : Optional[List[Header]] (optional) Optional headers. Defaults to None. content : Optional[Content] (optional) Optional content, defaults to None. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_1","text":"HttpSessionInstance : A context instance yielding the response and body","title":"Returns"},{"location":"api/bareclient/#module-bareclienthelpers","text":"","title":"module bareclient.helpers"},{"location":"api/bareclient/#summary_5","text":"Helpers","title":"Summary"},{"location":"api/bareclient/#async-function-bareclientget","text":"","title":"async function bareclient.get"},{"location":"api/bareclient/#summary_6","text":"Issues a GET request async bareclient . get ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_5","text":"url : str The url headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_2","text":"bytes : [description]","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientget_json","text":"","title":"async function bareclient.get_json"},{"location":"api/bareclient/#summary_7","text":"Issues a GET request returning a JSON object","title":"Summary"},{"location":"api/bareclient/#description_3","text":"The following gets some json: import asyncio from bareclient import get_json async def main ( url : str ) -> None : obj = await get_json ( url ) print ( obj ) asyncio . run ( main ( 'https://jsonplaceholder.typicode.com/todos/1' )) async bareclient . get_json ( url : str , * , headers : Headers , loads : Callable[[str], Any] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> Any","title":"Description"},{"location":"api/bareclient/#parameters_6","text":"url : str The url headers : Headers (optional) Any extra headers required. Defaults to None. loads : Callable[[str], Any] (optional) The function to loads the JSON object from the string. Defaults to json.loads. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_3","text":"Any : The decoded JSON object","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientget_text","text":"","title":"async function bareclient.get_text"},{"location":"api/bareclient/#summary_8","text":"Issues a GET request returning a string","title":"Summary"},{"location":"api/bareclient/#description_4","text":"The following gets some text: import asyncio from bareclient import get_text async def main ( url : str ) -> None : text = await get_text ( url ) print ( text ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) async bareclient . get_text ( url : str , * , headers : Headers , loop : Optional[AbstractEventLoop] , encoding : str , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , connect_timeout : Optional[Union[int, float]] ) -> str","title":"Description"},{"location":"api/bareclient/#parameters_7","text":"url : str The url headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. encoding : str (optional) cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_4","text":"str : [description]","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientpost","text":"","title":"async function bareclient.post"},{"location":"api/bareclient/#summary_9","text":"Issues a POST request async bareclient . post ( url : str , content : bytes , * , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_8","text":"url : str The url content : bytes The body content headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_5","text":"bytes : The response body","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientpost_json","text":"","title":"async function bareclient.post_json"},{"location":"api/bareclient/#summary_10","text":"Issues a POST request with a JSON payload","title":"Summary"},{"location":"api/bareclient/#description_5","text":"import asyncio from bareclient import post_json async def main ( url : str ) -> None : obj = await post_json ( url , { 'title' : 'A job' }, headers = [( b 'accept-encoding' , b 'gzip' )] ) print ( obj ) asyncio . run ( main ( 'https://jsonplaceholder.typicode.com/todos' )) async bareclient . post_json ( url : str , obj : Any , * , loads : Callable[[str], Any] , dumps : Callable[[Any], str] , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> Optional[Any]","title":"Description"},{"location":"api/bareclient/#parameters_9","text":"url : str The url obj : Any The JSON payload loads : Callable[[str], Any] (optional) The function used to decode the response. Defaults to json.loads. dumps : Callable[[Any], str] (optional) The function used to encode the request. Defaults to json.dumps. headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_6","text":"Optional[Any] : The decoded response","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientpost_text","text":"","title":"async function bareclient.post_text"},{"location":"api/bareclient/#summary_11","text":"Issues a POST request with a str body async bareclient . post_text ( url : str , text : str , * , encoding : Any , headers : Headers , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> bytes","title":"Summary"},{"location":"api/bareclient/#parameters_10","text":"url : str The url text : str encoding : Any (optional) headers : Headers (optional) Any extra headers required. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk.. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_7","text":"bytes : The response body","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientrequest","text":"","title":"async function bareclient.request"},{"location":"api/bareclient/#summary_12","text":"Gets bytes from a url.","title":"Summary"},{"location":"api/bareclient/#description_6","text":"buf = await request ( 'https://jsonplaceholder.typicode.com/todos/1' , 'GET' , ssl = ssl . SSLContext () ) async bareclient . request ( url : str , method : str , * , headers : Headers , content : Optional[bytes] , loop : Optional[AbstractEventLoop] , cafile : Optional[str] , capath : Optional[str] , cadata : Optional[str] , ssl_context : Optional[SSLContext] , decompressors : Optional[Mapping[bytes, Type[Decompressor]]] , protocols : Iterable[str] , ciphers : Iterable[str] , options : Iterable[int] , chunk_size : int , connect_timeout : Optional[Union[int, float]] ) -> bytes","title":"Description"},{"location":"api/bareclient/#parameters_11","text":"url : str The url to get. method : str The HTTP method (eg. 'GET', 'POST', etc). headers : Headers (optional) Any extra headers required. Defaults to None. content : Optional[bytes] (optional) The content to send.. Defaults to None. loop : Optional[AbstractEventLoop] (optional) The optional asyncio event loop.. Defaults to None. cafile : Optional[str] (optional) The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath : Optional[str] (optional) The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata : Optional[str] (optional) Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. ssl_context : Optional[SSLContext] (optional) An ssl context to be used instead of generating one from the certificates. decompressors : Optional[Mapping[bytes, Type[Decompressor]]] (optional) The decompressors. Defaults to None. protocols : Iterable[str] (optional) The supported protocols. Defaults to DEFAULT_PROTOCOLS. ciphers : Iterable[str] (optional) The supported ciphers. Defaults to DEFAULT_CIPHERS. options : Iterable[int] (optional) The ssl.SSLContext.options. Defaults to DEFAULT_OPTIONS. chunk_size : int (optional) The size of each chunk to send or -1 to send as a single chunk. Defaults to -1. connect_timeout : Optional[Union[int, float]] (optional) The number of seconds to wait for the connection. Defaults to None.","title":"Parameters"},{"location":"api/bareclient/#returns_8","text":"bytes : The bytes received.","title":"Returns"},{"location":"user-guide/getting-started/","text":"Getting Started \u00b6 The basic usage is to create an HttpClient . GET \u00b6 The following example demonstrates a simple GET request. import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : async with HttpClient ( url ) as response : if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) The HttpClient request provides an async context yielding a response . POST \u00b6 The following code demonstrates a simple POST request. import asyncio import json from bareutils import text_writer import bareutils.response_code as response_code from bareclient import HttpClient async def main ( url : str ) -> None : obj = { 'name' : 'Rob' } body = json . dumps ( obj ) async with HttpClient ( url , method = 'POST' , headers = [( b 'content-type' , b 'application/json' )], content = text_writer ( body ) ) as response : if response_code . is_successful ( response . status_code ): print ( \"OK\" ) asyncio . run ( main ( 'http://localhost:9009/test/api/info' )) Note that the body content is provided with the test_writer utility which turns the payload into an async iterator.","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"The basic usage is to create an HttpClient .","title":"Getting Started"},{"location":"user-guide/getting-started/#get","text":"The following example demonstrates a simple GET request. import asyncio from bareclient import HttpClient async def main ( url : str ) -> None : async with HttpClient ( url ) as response : if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) The HttpClient request provides an async context yielding a response .","title":"GET"},{"location":"user-guide/getting-started/#post","text":"The following code demonstrates a simple POST request. import asyncio import json from bareutils import text_writer import bareutils.response_code as response_code from bareclient import HttpClient async def main ( url : str ) -> None : obj = { 'name' : 'Rob' } body = json . dumps ( obj ) async with HttpClient ( url , method = 'POST' , headers = [( b 'content-type' , b 'application/json' )], content = text_writer ( body ) ) as response : if response_code . is_successful ( response . status_code ): print ( \"OK\" ) asyncio . run ( main ( 'http://localhost:9009/test/api/info' )) Note that the body content is provided with the test_writer utility which turns the payload into an async iterator.","title":"POST"},{"location":"user-guide/http-protocols/","text":"HTTP Protocols \u00b6 Currently the client understands HTTP/1.1 and HTTP/2. The protocols can set with an optional argument protocols , which is set to DEFAULT_PROTOCOLS by default. For example to restrict the client to HTTP/2: \"\"\"Simple GET\"\"\" import asyncio from bareclient import HttpClient , DEFAULT_CIPHERS async def main ( url : str ) -> None : async with HttpClient ( url , method = 'GET' , protocols = [ 'h2' ]) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) print ( 'Done' ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' ))","title":"HTTP Protocols"},{"location":"user-guide/http-protocols/#http-protocols","text":"Currently the client understands HTTP/1.1 and HTTP/2. The protocols can set with an optional argument protocols , which is set to DEFAULT_PROTOCOLS by default. For example to restrict the client to HTTP/2: \"\"\"Simple GET\"\"\" import asyncio from bareclient import HttpClient , DEFAULT_CIPHERS async def main ( url : str ) -> None : async with HttpClient ( url , method = 'GET' , protocols = [ 'h2' ]) as response : print ( response ) if response . status_code == 200 and response . body is not None : async for part in response . body : print ( part ) print ( 'Done' ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' ))","title":"HTTP Protocols"},{"location":"user-guide/installation/","text":"Installation \u00b6 The package can be installed with pip. pip install bareclient This is a Python3.7 and later package. It has dependencies on: bareTypes bareUtils h11 h2","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The package can be installed with pip. pip install bareclient This is a Python3.7 and later package. It has dependencies on: bareTypes bareUtils h11 h2","title":"Installation"},{"location":"user-guide/requests/","text":"Requests \u00b6 HttpClient \u00b6 The request is specified in the arguments to HttpClient . The first argument is the url . The remaining are keyword arguments: Keyword arguments: method (str, optional): The HTTP method. Defaults to 'GET'. headers (Optional[List[Header]], optional): The headers. Defaults to None. content (Optional[Content], optional): The body content. Defaults to None. loop (Optional[AbstractEventLoop], optional): The optional asyncio event loop. Defaults to None. h11_bufsiz (int, optional): The HTTP/1 buffer size. Defaults to 8096. cafile (Optional[str], optional): The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath (Optional[str], optional): The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata (Optional[str], optional): Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors (Optional[Mapping[bytes, Type[Decompressor]]], optional): The decompressors. Defaults to None. protocols (Optional[List[str]], optional): The protocols. Defaults to None. HttpSession \u00b6 For an HttpSession there is a request method which takes the following arguments: The first argument is the path . The remaining are keyword arguments: Keyword arguments: method (str, optional): The HTTP method. Defaults to 'GET'. headers (Optional[List[Header]], optional): The headers. Defaults to None. content (Optional[Content], optional): The body content. Defaults to None.","title":"Requests"},{"location":"user-guide/requests/#requests","text":"","title":"Requests"},{"location":"user-guide/requests/#httpclient","text":"The request is specified in the arguments to HttpClient . The first argument is the url . The remaining are keyword arguments: Keyword arguments: method (str, optional): The HTTP method. Defaults to 'GET'. headers (Optional[List[Header]], optional): The headers. Defaults to None. content (Optional[Content], optional): The body content. Defaults to None. loop (Optional[AbstractEventLoop], optional): The optional asyncio event loop. Defaults to None. h11_bufsiz (int, optional): The HTTP/1 buffer size. Defaults to 8096. cafile (Optional[str], optional): The path to a file of concatenated CA certificates in PEM format. Defaults to None. capath (Optional[str], optional): The path to a directory containing several CA certificates in PEM format. Defaults to None. cadata (Optional[str], optional): Either an ASCII string of one or more PEM-encoded certificates or a bytes-like object of DER-encoded certificates. Defaults to None. decompressors (Optional[Mapping[bytes, Type[Decompressor]]], optional): The decompressors. Defaults to None. protocols (Optional[List[str]], optional): The protocols. Defaults to None.","title":"HttpClient"},{"location":"user-guide/requests/#httpsession","text":"For an HttpSession there is a request method which takes the following arguments: The first argument is the path . The remaining are keyword arguments: Keyword arguments: method (str, optional): The HTTP method. Defaults to 'GET'. headers (Optional[List[Header]], optional): The headers. Defaults to None. content (Optional[Content], optional): The body content. Defaults to None.","title":"HttpSession"},{"location":"user-guide/responses/","text":"Responses \u00b6 The response is yielded in the HttpClient async context. The response object has the following fields: Fields: status_code ( int ) - The HTTP status code. headers ( List[[byte string, byte string]] ) - A list of [name, value] two-item iterables, where name is the header name, and value is the header value. Order must be preserved in the HTTP response. Header names must be lowercased. Optional; defaults to an empty list. Pseudo headers (present in HTTP/2 and HTTP/3) must not be present. body ( Optional[AsyncIterable[byte string]] ) - The body content if any. Response Body \u00b6 The response body ( response.body ) may be None or an async iterator. It can be iterated over asynchronusly as follows. async for part in response . body : print ( part )","title":"Responses"},{"location":"user-guide/responses/#responses","text":"The response is yielded in the HttpClient async context. The response object has the following fields: Fields: status_code ( int ) - The HTTP status code. headers ( List[[byte string, byte string]] ) - A list of [name, value] two-item iterables, where name is the header name, and value is the header value. Order must be preserved in the HTTP response. Header names must be lowercased. Optional; defaults to an empty list. Pseudo headers (present in HTTP/2 and HTTP/3) must not be present. body ( Optional[AsyncIterable[byte string]] ) - The body content if any.","title":"Responses"},{"location":"user-guide/responses/#response-body","text":"The response body ( response.body ) may be None or an async iterator. It can be iterated over asynchronusly as follows. async for part in response . body : print ( part )","title":"Response Body"},{"location":"user-guide/session/","text":"Session \u00b6 A session utility HttpSession is provided. The session is created with the base url. Each subsequent request will maintain the session cookies in the same manner as a browser. The following example demonstrates this: import asyncio import json from bareutils import text_reader import bareutils.header as header import bareutils.response_code as response_code from bareclient import HttpSession async def main () -> None : \"\"\"Session example\"\"\" # Create the session session = HttpSession ( 'https://jsonplaceholder.typicode.com' ) async with session . request ( '/users/1/posts' , method = 'GET' ) as response : # We expect a session cookie to be sent on the initial request. set_cookie = header . find ( b 'set-cookie' , response [ 'headers' ]) print ( \"Session cookie!\" if set_cookie else \"No session cookie\" ) if not response_code . is_successful ( response . status_code ): raise Exception ( \"Failed to get posts\" ) posts = json . loads ( await text_reader ( response . body )) print ( f 'We received { len ( posts ) } posts' ) for post in posts : path = f '/posts/ { post [ \"id\" ] } /comments' print ( f 'Requesting comments from \" { path } \"\"' ) async with session . request ( path , method = 'GET' ) as response : # As we were sent the session cookie we do not expect to receive # another one, until this one has expired. set_cookie = header . find ( b 'set-cookie' , response . headers ) print ( \"Session cookie!\" if set_cookie else \"No session cookie\" ) if not response_code . is_successful ( response . status_code ): raise Exception ( \"Failed to get comments\" ) comments = json . loads ( await text_reader ( response . body )) print ( f 'We received { len ( comments ) } comments' ) asyncio . run ( main ()) The session object will maintain cookies.","title":"Session"},{"location":"user-guide/session/#session","text":"A session utility HttpSession is provided. The session is created with the base url. Each subsequent request will maintain the session cookies in the same manner as a browser. The following example demonstrates this: import asyncio import json from bareutils import text_reader import bareutils.header as header import bareutils.response_code as response_code from bareclient import HttpSession async def main () -> None : \"\"\"Session example\"\"\" # Create the session session = HttpSession ( 'https://jsonplaceholder.typicode.com' ) async with session . request ( '/users/1/posts' , method = 'GET' ) as response : # We expect a session cookie to be sent on the initial request. set_cookie = header . find ( b 'set-cookie' , response [ 'headers' ]) print ( \"Session cookie!\" if set_cookie else \"No session cookie\" ) if not response_code . is_successful ( response . status_code ): raise Exception ( \"Failed to get posts\" ) posts = json . loads ( await text_reader ( response . body )) print ( f 'We received { len ( posts ) } posts' ) for post in posts : path = f '/posts/ { post [ \"id\" ] } /comments' print ( f 'Requesting comments from \" { path } \"\"' ) async with session . request ( path , method = 'GET' ) as response : # As we were sent the session cookie we do not expect to receive # another one, until this one has expired. set_cookie = header . find ( b 'set-cookie' , response . headers ) print ( \"Session cookie!\" if set_cookie else \"No session cookie\" ) if not response_code . is_successful ( response . status_code ): raise Exception ( \"Failed to get comments\" ) comments = json . loads ( await text_reader ( response . body )) print ( f 'We received { len ( comments ) } comments' ) asyncio . run ( main ()) The session object will maintain cookies.","title":"Session"},{"location":"user-guide/ssl/","text":"SSL \u00b6 The HttpClient , HttpSession , and the helper functions all take a number of optional arguments which may be used to configure SSl. SSLContext \u00b6 If an ssl.SSLContext is passed (e.g. HttpClient(... , ssl_context=ctx) ) all other arguments are ignored. There a two helper functions. create_ssl_context - creates a simple ssl context create_ssl_context_with_cert_chain - creates a context with a client certificate and key. Optional helper arguments \u00b6 There are a number of helper arguments which are useful for making targeted changes to the default ssl context. The arguments cafile , capath , and cadata are passed directly though to ssl.create_default_context . The argument ciphers is an iterable that defaults to DEFAULT_CIPHERS . It is applied to the SSLContext instance with set_ciphers . The following shows how to downgrade the security level for trusted legacy servers. import asyncio from bareclient import HttpClient , DEFAULT_CIPHERS async def main ( url : str ) -> None : ciphers = list ( DEFAULT_CIPHERS ) + [ 'ALL:@SECLEVEL=1' ] async with HttpClient ( url , method = 'GET' , ciphers = ciphers ) as response : print ( response ) if response [ 'status_code' ] == 200 and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) print ( 'Done' ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) The argument options is an iterable of SSL options which are applied as an \"or\" to the [ SSLContext.options](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers) member variable. By default it is set to DEFAULT_OPTIONS` which is a tuple of options which seemed sensible at the time this library was built.","title":"SSL"},{"location":"user-guide/ssl/#ssl","text":"The HttpClient , HttpSession , and the helper functions all take a number of optional arguments which may be used to configure SSl.","title":"SSL"},{"location":"user-guide/ssl/#sslcontext","text":"If an ssl.SSLContext is passed (e.g. HttpClient(... , ssl_context=ctx) ) all other arguments are ignored. There a two helper functions. create_ssl_context - creates a simple ssl context create_ssl_context_with_cert_chain - creates a context with a client certificate and key.","title":"SSLContext"},{"location":"user-guide/ssl/#optional-helper-arguments","text":"There are a number of helper arguments which are useful for making targeted changes to the default ssl context. The arguments cafile , capath , and cadata are passed directly though to ssl.create_default_context . The argument ciphers is an iterable that defaults to DEFAULT_CIPHERS . It is applied to the SSLContext instance with set_ciphers . The following shows how to downgrade the security level for trusted legacy servers. import asyncio from bareclient import HttpClient , DEFAULT_CIPHERS async def main ( url : str ) -> None : ciphers = list ( DEFAULT_CIPHERS ) + [ 'ALL:@SECLEVEL=1' ] async with HttpClient ( url , method = 'GET' , ciphers = ciphers ) as response : print ( response ) if response [ 'status_code' ] == 200 and response [ 'more_body' ]: async for part in response [ 'body' ]: print ( part ) print ( 'Done' ) asyncio . run ( main ( 'https://docs.python.org/3/library/cgi.html' )) The argument options is an iterable of SSL options which are applied as an \"or\" to the [ SSLContext.options](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers) member variable. By default it is set to DEFAULT_OPTIONS` which is a tuple of options which seemed sensible at the time this library was built.","title":"Optional helper arguments"}]}