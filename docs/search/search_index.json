{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lightweight Asyncio HTTP Client \u00b6 A simple asyncio http client. Description \u00b6 This package provides the asyncio transport for h11 . It makes little attempt to provide any helpful features. This client is part of a suite of lightweight HTTP tools around the bareASGI framework.","title":"Lightweight Asyncio HTTP Client"},{"location":"#lightweight-asyncio-http-client","text":"A simple asyncio http client.","title":"Lightweight Asyncio HTTP Client"},{"location":"#description","text":"This package provides the asyncio transport for h11 . It makes little attempt to provide any helpful features. This client is part of a suite of lightweight HTTP tools around the bareASGI framework.","title":"Description"},{"location":"api/bareclient/","text":"API \u00b6 class HttpClient \u00b6 Summary \u00b6 Construct the client. bareclient . HttpClient ( method : str , headers : ListTuple[bytes, bytes]] , content : UnionAsyncIterable[bytes], NoneType] , loop : Union[asyncio.events.AbstractEventLoop, NoneType] , bufsiz : int , decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] , **kwargs ) Parameters \u00b6 method : str The HTTP method (GET, POST, etc.) headers : ListTuple[bytes, bytes]] Headers to send. content : UnionAsyncIterable[bytes], NoneType] loop : Union[asyncio.events.AbstractEventLoop, NoneType] An optional event loop bufsiz : int An optional block size to read and write (defaults to 1024). decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] An optional dictionary of decompressors. **kwargs (optional) class HttpSession \u00b6 Summary \u00b6 Construct the client. bareclient . HttpSession ( loop : Union[asyncio.events.AbstractEventLoop, NoneType] , bufsiz : int , decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] , **kwargs ) Parameters \u00b6 loop : Union[asyncio.events.AbstractEventLoop, NoneType] An optional asyncio event loop. bufsiz : int The block size to read and write. decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] An optional dictionary of decompressors. **kwargs (optional) class Requester \u00b6 Summary \u00b6 Requests HTTP from a session. bareclient . Requester ( writer : StreamWriter , bufsiz : int , decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] ) Parameters \u00b6 writer : StreamWriter (optional) An asyncio.StreamWriter provider by the context. bufsiz : int The block size to read and write. decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] async method Requester . request \u00b6 Summary \u00b6 Make an HTTP request. async Requester . request ( path : str , method : str , headers : ListTuple[bytes, bytes]] , content : UnionAsyncIterable[bytes], NoneType] ) Parameters \u00b6 path : str (optional) The request path. method : str (optional) The request method (e.g. GET, POST, etc.) headers : ListTuple[bytes, bytes]] (optional) Headers to send. content : UnionAsyncIterable[bytes], NoneType] Optional data to send. Returns \u00b6 Tuple[h11._events.ResponseAsyncIterable[bytes]] : An h11.Response object and an async generator function to retrieve the body. async function bareclient . get_json \u00b6 Summary \u00b6 Gets a json object from a url. async bareclient . get_json ( url : str , * , headers : ListTuple[bytes, bytes]] , loads : Callable[[strUnionListAnyMapping[strAny]]] , loop : Union[asyncio.events.AbstractEventLoop, NoneType] , ssl : Union[ssl.SSLContext, NoneType] ) Parameters \u00b6 url : str (optional) The url to get. * (optional) headers : ListTuple[bytes, bytes]] Any extra headers required. loads : Callable[[strUnionListAnyMapping[strAny]]] An optional function to decode the JSON (defaults to json.loads). loop : Union[asyncio.events.AbstractEventLoop, NoneType] The optional asyncio event loop. ssl : Union[ssl.SSLContext, NoneType] An optional ssl.SSLContext. Returns \u00b6 UnionListAnyMapping[strAny]] : The decoded JSON object. Description \u00b6 .. code-block:: python obj = await get_json('https://jsonplaceholder.typicode.com/todos/1', ssl=ssl.SSLContext())","title":"bareclient"},{"location":"api/bareclient/#api","text":"","title":"API"},{"location":"api/bareclient/#class-httpclient","text":"","title":"class HttpClient"},{"location":"api/bareclient/#summary","text":"Construct the client. bareclient . HttpClient ( method : str , headers : ListTuple[bytes, bytes]] , content : UnionAsyncIterable[bytes], NoneType] , loop : Union[asyncio.events.AbstractEventLoop, NoneType] , bufsiz : int , decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] , **kwargs )","title":"Summary"},{"location":"api/bareclient/#parameters","text":"method : str The HTTP method (GET, POST, etc.) headers : ListTuple[bytes, bytes]] Headers to send. content : UnionAsyncIterable[bytes], NoneType] loop : Union[asyncio.events.AbstractEventLoop, NoneType] An optional event loop bufsiz : int An optional block size to read and write (defaults to 1024). decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] An optional dictionary of decompressors. **kwargs (optional)","title":"Parameters"},{"location":"api/bareclient/#class-httpsession","text":"","title":"class HttpSession"},{"location":"api/bareclient/#summary_1","text":"Construct the client. bareclient . HttpSession ( loop : Union[asyncio.events.AbstractEventLoop, NoneType] , bufsiz : int , decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] , **kwargs )","title":"Summary"},{"location":"api/bareclient/#parameters_1","text":"loop : Union[asyncio.events.AbstractEventLoop, NoneType] An optional asyncio event loop. bufsiz : int The block size to read and write. decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] An optional dictionary of decompressors. **kwargs (optional)","title":"Parameters"},{"location":"api/bareclient/#class-requester","text":"","title":"class Requester"},{"location":"api/bareclient/#summary_2","text":"Requests HTTP from a session. bareclient . Requester ( writer : StreamWriter , bufsiz : int , decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType] )","title":"Summary"},{"location":"api/bareclient/#parameters_2","text":"writer : StreamWriter (optional) An asyncio.StreamWriter provider by the context. bufsiz : int The block size to read and write. decompressors : UnionMapping[bytesType[bareutils.compression.streaming.Decompressor]], NoneType]","title":"Parameters"},{"location":"api/bareclient/#async-method-requesterrequest","text":"","title":"async method Requester.request"},{"location":"api/bareclient/#summary_3","text":"Make an HTTP request. async Requester . request ( path : str , method : str , headers : ListTuple[bytes, bytes]] , content : UnionAsyncIterable[bytes], NoneType] )","title":"Summary"},{"location":"api/bareclient/#parameters_3","text":"path : str (optional) The request path. method : str (optional) The request method (e.g. GET, POST, etc.) headers : ListTuple[bytes, bytes]] (optional) Headers to send. content : UnionAsyncIterable[bytes], NoneType] Optional data to send.","title":"Parameters"},{"location":"api/bareclient/#returns","text":"Tuple[h11._events.ResponseAsyncIterable[bytes]] : An h11.Response object and an async generator function to retrieve the body.","title":"Returns"},{"location":"api/bareclient/#async-function-bareclientget_json","text":"","title":"async function bareclient.get_json"},{"location":"api/bareclient/#summary_4","text":"Gets a json object from a url. async bareclient . get_json ( url : str , * , headers : ListTuple[bytes, bytes]] , loads : Callable[[strUnionListAnyMapping[strAny]]] , loop : Union[asyncio.events.AbstractEventLoop, NoneType] , ssl : Union[ssl.SSLContext, NoneType] )","title":"Summary"},{"location":"api/bareclient/#parameters_4","text":"url : str (optional) The url to get. * (optional) headers : ListTuple[bytes, bytes]] Any extra headers required. loads : Callable[[strUnionListAnyMapping[strAny]]] An optional function to decode the JSON (defaults to json.loads). loop : Union[asyncio.events.AbstractEventLoop, NoneType] The optional asyncio event loop. ssl : Union[ssl.SSLContext, NoneType] An optional ssl.SSLContext.","title":"Parameters"},{"location":"api/bareclient/#returns_1","text":"UnionListAnyMapping[strAny]] : The decoded JSON object.","title":"Returns"},{"location":"api/bareclient/#description","text":".. code-block:: python obj = await get_json('https://jsonplaceholder.typicode.com/todos/1', ssl=ssl.SSLContext())","title":"Description"},{"location":"user-guide/installation/","text":"Installation \u00b6 This is a Python 3.7 package. pip install bareclient","title":"Installation"},{"location":"user-guide/installation/#installation","text":"This is a Python 3.7 package. pip install bareclient","title":"Installation"},{"location":"user-guide/usage/","text":"Usage \u00b6 The basic usage is to create an HttpClient . import asyncio from bareclient import HttpClient import ssl async def main ( url , headers , ssl ): async with HttpClient ( url , method = 'GET' , headers = headers , ssl = ssl ) as ( response , body ): print ( response ) if response . status_code == 200 : async for part in body : print ( part ) url = 'https://docs.python.org/3/library/cgi.html' headers = [( b 'host' , b 'docs.python.org' ), ( b 'connection' , b 'close' )] ssl_context = ssl . SSLContext () loop = asyncio . get_event_loop () loop . run_until_complete ( main ( url , headers , ssl_context )) There is also an HttpSession for keep-alive connections. import asyncio from bareclient import HttpSession import ssl async def main ( url , headers , paths , ssl ): async with HttpSession ( url , ssl = ssl ) as requester : for path in paths : response , body = await requester . request ( path , method = 'GET' , headers = headers ) print ( response ) if response . status_code == 200 : async for part in body : print ( part ) url = 'https://docs.python.org' headers = [( b 'host' , b 'docs.python.org' ), ( b 'connection' , b 'keep-alive' )] paths = [ '/3/library/cgi.html' , '/3/library/urllib.parse.html' ] ssl_context = ssl . SSLContext () loop = asyncio . get_event_loop () loop . run_until_complete ( main ( url , headers , paths , ssl_context )) Finally there is a single helper function to get json. import asyncio import ssl from bareclient import get_json async def main ( url , ssl ): obj = await get_json ( url , ssl = ssl ) print ( obj ) url = 'https://jsonplaceholder.typicode.com/todos/1' ssl_context = ssl . SSLContext () loop = asyncio . get_event_loop () loop . run_until_complete ( main ( url , ssl_context ))","title":"Usage"},{"location":"user-guide/usage/#usage","text":"The basic usage is to create an HttpClient . import asyncio from bareclient import HttpClient import ssl async def main ( url , headers , ssl ): async with HttpClient ( url , method = 'GET' , headers = headers , ssl = ssl ) as ( response , body ): print ( response ) if response . status_code == 200 : async for part in body : print ( part ) url = 'https://docs.python.org/3/library/cgi.html' headers = [( b 'host' , b 'docs.python.org' ), ( b 'connection' , b 'close' )] ssl_context = ssl . SSLContext () loop = asyncio . get_event_loop () loop . run_until_complete ( main ( url , headers , ssl_context )) There is also an HttpSession for keep-alive connections. import asyncio from bareclient import HttpSession import ssl async def main ( url , headers , paths , ssl ): async with HttpSession ( url , ssl = ssl ) as requester : for path in paths : response , body = await requester . request ( path , method = 'GET' , headers = headers ) print ( response ) if response . status_code == 200 : async for part in body : print ( part ) url = 'https://docs.python.org' headers = [( b 'host' , b 'docs.python.org' ), ( b 'connection' , b 'keep-alive' )] paths = [ '/3/library/cgi.html' , '/3/library/urllib.parse.html' ] ssl_context = ssl . SSLContext () loop = asyncio . get_event_loop () loop . run_until_complete ( main ( url , headers , paths , ssl_context )) Finally there is a single helper function to get json. import asyncio import ssl from bareclient import get_json async def main ( url , ssl ): obj = await get_json ( url , ssl = ssl ) print ( obj ) url = 'https://jsonplaceholder.typicode.com/todos/1' ssl_context = ssl . SSLContext () loop = asyncio . get_event_loop () loop . run_until_complete ( main ( url , ssl_context ))","title":"Usage"}]}